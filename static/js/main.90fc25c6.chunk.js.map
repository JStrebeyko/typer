{"version":3,"sources":["logo.svg","components/Typer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Typer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startTimer","stopTimer","intervalId","setInterval","type","typingSpeed","clearInterval","lineCounter","state","word","lines","whichLine","isTheLineComplete","length","eternal","eraseSecondLine","setState","console","log","charCounter","addLetter","what","where","_this$setState","defineProperty","erasingInterval","secondLineOutput","slice","deletingSpeed","firstLineOutput","prevProps","react_default","a","createElement","className","Component","defaultProps","App","addTag","lineToAdd","concat","toConsumableArray","handleKeyUp","e","key","handleChange","target","value","toggleEternal","deleteTag","index","alert","arr2splice","splice","_this2","components_Typer","src","logo","alt","onChange","onKeyUp","placeholder","onClick","checked","map","x","i","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90fc25c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Typer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lines: this.props.lines,\n      lineCounter: 0,\n      charCounter: 0,\n      firstLineOutput: '',\n      secondLineOutput: '',\n    }\n  }\n\n  static defaultProps = {\n    typingSpeed: 500,\n    deletingSpeed: 200,\n    eternal: false\n  }\n\n  componentDidMount() {\n\n    // setting up time-tracking, if there is the line props provided\n    // and if its first element is not falsy:\n    if (this.props.lines) {\n      this.props.lines[0] && this.startTimer()\n    }\n  }\n\n  // this is me, frantically trying to manage props change\n  componentDidUpdate(prevProps) {\n    if (this.props.lines!==prevProps.lines) {\n      this.setState({\n        lines: this.props.lines,\n        charCounter: 0,\n        firstLineOutput: this.props.lines[0],\n        lineCounter: 1,\n      })\n      this.startTimer();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopTimer()\n  }\n\n  startTimer = () => {\n    this.stopTimer();\n    this.intervalId = setInterval(this.type, this.props.typingSpeed);\n  }\n\n  stopTimer = () => {\n    clearInterval(this.intervalId);\n  }\n\n  type = () => {\n    const {lineCounter} = this.state;\n    const word = this.props.lines[lineCounter];\n    const whichLine = lineCounter < 1 ? 'firstLineOutput' : 'secondLineOutput';\n    const isTheLineComplete = this.state[whichLine] === word;\n\n    // business logic scenarios:\n\n    // 1. In case it all has been written:\n    // (meaning lineCounter equals num. of lines and character counter is equal to the last line's length)\n    if (this.state.lineCounter === this.props.lines.length) {\n\n      // a) is the eternal mode on?\n      // keep on going or finish\n      if (this.props.eternal) {\n        this.eraseSecondLine();\n        this.setState({\n          lineCounter: 1\n        })\n      } else {\n        this.stopTimer();\n        console.log('Typer stopped.');\n      }\n\n    // 2. In case there are still lines to write\n    // but the current one is complete:\n    } else if (isTheLineComplete) {\n      this.setState({\n        lineCounter: lineCounter + 1,\n        charCounter: 0,\n      })\n      if (this.state.lineCounter > 1 && this.state.lineCounter !== this.props.lines.length) {\n        this.eraseSecondLine();\n      }\n    // 3. Business as usual\n    } else {\n      this.addLetter(word, whichLine);\n    }\n  }\n\n  addLetter = (what, where) => {\n    const {charCounter} = this.state;\n\n    if (what[charCounter]) {\n\n      this.setState({\n        [where]: this.state[where] + what[charCounter],\n        charCounter: charCounter + 1\n      })\n    }\n\n  }\n\n  eraseSecondLine = () => {\n    this.stopTimer()\n    this.erasingInterval = setInterval(() => {\n      if (this.state.secondLineOutput === \"\") {\n        clearInterval(this.erasingInterval);\n        this.startTimer();\n      }\n      this.setState({\n        secondLineOutput: this.state.secondLineOutput.slice(0, this.state.secondLineOutput.length-1)\n      })\n    }, this.props.deletingSpeed)\n  }\n\n  render() {\n\n    return (\n      <div className=\"typer-wrapper\">\n        <span>{this.state.firstLineOutput}</span>\n        <span>{this.state.secondLineOutput}</span>\n      </div>\n      );\n  }\n}\n\nexport default Typer;\n\nTyper.propTypes = {\n  lines: PropTypes.array,\n  typingSpeed: PropTypes.number,\n  deletingSpeed: PropTypes.number,\n  eternal: PropTypes.bool,\n};\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Typer from './components/Typer'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      lines: [\n        'puk puk',\n        'kto tam?',\n        'chico...'\n      ],\n      lineToAdd: '',\n      eternal: true,\n\n    }\n  }\n\n  addTag = () => {\n    if (this.state.lineToAdd === '') {\n      return false\n    }\n    this.setState({\n      lines: [...this.state.lines, this.state.lineToAdd],\n      lineToAdd: ''\n    })\n  }\n\n  handleKeyUp = (e) => {\n    if (e.key === 'Enter') {\n      this.addTag();\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      lineToAdd: e.target.value\n    })\n  }\n\n  toggleEternal = () => {\n    this.setState({\n      eternal: !this.state.eternal\n    })\n  }\n\n  deleteTag = (index) => {\n    if (this.state.lines.length === 1) {\n      alert(\"Typer needs text!\");\n    } else {\n      const arr2splice = [...this.state.lines];\n      arr2splice.splice(index,1)\n      this.setState({\n        lines: arr2splice\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"container\">\n            <Typer lines={this.state.lines} eternal={this.state.eternal}/>\n          </div>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"controls\">\n            <input value={this.state.lineToAdd} onChange={this.handleChange} onKeyUp={this.handleKeyUp} placeholder=\"Add your text...\"/>\n            <button onClick={this.addTag}>add</button>\n            <br/>\n            <label>\n              eternal mode\n              <input type=\"checkbox\" checked={this.state.eternal} onChange={this.toggleEternal}/>\n            </label>\n            <br/>\n\n            {this.state.lines.map((x,i) => (<span key={i}>{x} | <span onClick={e => this.deleteTag(i)}>x</span></span>))}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}